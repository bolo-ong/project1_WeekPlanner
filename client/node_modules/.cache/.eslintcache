[{"/Users/imchaemin/Desktop/react-project/project1/client/src/index.js":"1","/Users/imchaemin/Desktop/react-project/project1/client/src/App.js":"2","/Users/imchaemin/Desktop/react-project/project1/client/src/reportWebVitals.js":"3","/Users/imchaemin/Desktop/react-project/project1/client/src/pages/Main.js":"4","/Users/imchaemin/Desktop/react-project/project1/client/src/pages/Service.js":"5","/Users/imchaemin/Desktop/react-project/project1/client/src/contexts/SignInCheckContext/SignInCheckProvider.js":"6","/Users/imchaemin/Desktop/react-project/project1/client/src/contexts/SignInCheckContext/SignInCheckContext.js":"7","/Users/imchaemin/Desktop/react-project/project1/client/src/components/Card.js":"8","/Users/imchaemin/Desktop/react-project/project1/client/src/components/Hero.js":"9","/Users/imchaemin/Desktop/react-project/project1/client/src/components/Layout.js":"10","/Users/imchaemin/Desktop/react-project/project1/client/src/components/Footer.js":"11","/Users/imchaemin/Desktop/react-project/project1/client/src/components/AddForm.js":"12","/Users/imchaemin/Desktop/react-project/project1/client/src/components/EditForm.js":"13","/Users/imchaemin/Desktop/react-project/project1/client/src/components/Header.js":"14","/Users/imchaemin/Desktop/react-project/project1/client/src/components/AuthOverlay.js":"15","/Users/imchaemin/Desktop/react-project/project1/client/src/components/AuthForm.js":"16"},{"size":628,"mtime":1675149604163,"results":"17","hashOfConfig":"18"},{"size":530,"mtime":1691428088897,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1673194696335,"results":"20","hashOfConfig":"18"},{"size":376,"mtime":1691429026991,"results":"21","hashOfConfig":"18"},{"size":5385,"mtime":1691500681088,"results":"22","hashOfConfig":"18"},{"size":1014,"mtime":1691051702701,"results":"23","hashOfConfig":"18"},{"size":110,"mtime":1686665142540,"results":"24","hashOfConfig":"18"},{"size":3074,"mtime":1688979618798,"results":"25","hashOfConfig":"18"},{"size":1447,"mtime":1691428945839,"results":"26","hashOfConfig":"18"},{"size":142,"mtime":1673609039140,"results":"27","hashOfConfig":"18"},{"size":572,"mtime":1688122184447,"results":"28","hashOfConfig":"18"},{"size":9393,"mtime":1691047924681,"results":"29","hashOfConfig":"18"},{"size":13005,"mtime":1691047924681,"results":"30","hashOfConfig":"18"},{"size":3100,"mtime":1691148996168,"results":"31","hashOfConfig":"18"},{"size":874,"mtime":1691148996284,"results":"32","hashOfConfig":"18"},{"size":9563,"mtime":1691416575649,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rcqh4a",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},"/Users/imchaemin/Desktop/react-project/project1/client/src/index.js",[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/App.js",[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/reportWebVitals.js",[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/pages/Main.js",[],[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/pages/Service.js",["87","88"],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/contexts/SignInCheckContext/SignInCheckProvider.js",[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/contexts/SignInCheckContext/SignInCheckContext.js",[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/components/Card.js",["89"],[],"import { v4 as uuidv4 } from 'uuid';\nimport { useContext } from 'react';\nimport SignInContext from '../contexts/SignInCheckContext/SignInCheckContext';\n\n\nfunction Card({ setAddForm, todayRoutines, setEditForm, setSelectedCardId }) {\n    const { isSignIn, setIsSignIn } = useContext(SignInContext);\n\n    return (\n        <>\n            <div className=\"w-[80vw] flex flex-wrap -m-4 px-5 py-10 mx-auto\">\n                <div className=\"p-4 max-sm:w-full sm:w-1/2 md:w-1/3 lg:w-1/4\" >\n                    {\n                        isSignIn ?\n                            (<div className=\"h-48 border-dotted border-4 hover:scale-101 rounded-lg h-full p-6 shadow-lg hover:shadow-indigo-500/30 cursor-pointer\"\n                                onClick={() => {\n                                    setAddForm(true)\n                                }}>\n                                <button className='relative top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 text-white bg-indigo-500 px-2 rounded-full text-lg cursor-pointer'\n                                    style={{ pointerEvents: 'none' }}>+</button>\n                            </div>)\n                            : (<div className=\"h-48 border-dotted border-4 hover:scale-101 rounded-lg h-full p-6 shadow-lg hover:shadow-indigo-500/30 cursor-pointer\">\n                                <button className='relative top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 text-white bg-indigo-500 px-2 rounded-full text-lg cursor-pointer'\n                                    style={{ pointerEvents: 'none' }}>+</button>\n                            </div>)\n                    }\n                </div>\n\n                {\n                    todayRoutines.map((data, i) => {\n                        return (\n                            <div className=\"p-4 max-sm:w-full sm:w-1/2 md:w-1/3 lg:w-1/4\" key={uuidv4()}>\n                                <div className=\"h-48 max-h-48 overflow-auto hover:scale-101 rounded-lg bg-gray-100 p-6 shadow-lg hover:shadow-indigo-500/30 cursor-pointer\" style={{ opacity: `100%` }}\n                                    onClick={() => {\n                                        setEditForm(true)\n                                        setSelectedCardId(data._id)\n                                    }}>\n                                    <div className=\"flex mb-3 items-center\t\">\n                                        <h2 className=\"text-gray-900 text-base font-medium max-md:text-sm\">{data.title}</h2>\n                                        <p className=\" text-indigo-500 ml-2 text-sm max-md:text-xs\">{data.time}</p>\n                                    </div>\n                                    <div className=\" text-gray-600\">\n                                        <p className=\"overflow-auto text-sm break-keep break-words\">{data.description}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n\n\n        </>\n    )\n}\n\n\n\nexport default Card;","/Users/imchaemin/Desktop/react-project/project1/client/src/components/Hero.js",[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/components/Layout.js",[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/components/Footer.js",[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/components/AddForm.js",["90"],[],"import { useRef, useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\"\nimport * as yup from \"yup\"\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction AddForm({ setAddForm, setRoutines }) {\n\n    //폼이 열리면, 제목란에 자동 포커스 되어 유저가 바로 입력할 수 있도록 구현\n    const inputRef = useRef();\n    useEffect(() => {\n        inputRef.current.focus();\n    }, [])\n\n    //esc키로 폼을 닫을 수 있도록 구현\n    const handleKeyDown = (e) => {\n        if (e.key === 'Escape') {\n            setAddForm(false);\n        }\n    };\n    useEffect(() => { //폼을 닫은 후에도 이벤트가 남아서 램을 낭비하지 않도록 이벤트를 삭제\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    }, []);\n\n\n    const [weekCheck, setWeekCheck] = useState({\n        \"월\": false,\n        \"화\": false,\n        \"수\": false,\n        \"목\": false,\n        \"금\": false,\n        \"토\": false,\n        \"일\": false\n    });\n    const week = Object.entries(weekCheck)\n\n    //유효성 검증\n    const validationSchema = yup.object().shape({\n        title: yup\n            .string()\n            .required('제목을 입력해 주세요.')\n            .max(100, '100자 이내로 작성해 주세요.'),\n        time: yup\n            .string()\n            .required('시간을 선택해 주세요.'),\n        description: yup\n            .string()\n            .max(300, '300자 이내로 작성해 주세요.'),\n        weekCheck: yup\n            .object()\n            .shape({\n                \"월\": yup.boolean(),\n                \"화\": yup.boolean(),\n                \"수\": yup.boolean(),\n                \"목\": yup.boolean(),\n                \"금\": yup.boolean(),\n                \"토\": yup.boolean(),\n                \"일\": yup.boolean(),\n            })\n            .test(\n                'isWeekChecked',\n                '요일을 선택해 주세요.',\n                obj => Object.values(obj).some(checked => checked === true)\n            )\n    })\n\n    //폼의 기본값 설정\n    const formik = useFormik({\n        initialValues: {\n            title: '',\n            time: '',\n            description: '',\n            weekCheck: {\n                '월': false,\n                '화': false,\n                '수': false,\n                '목': false,\n                '금': false,\n                '토': false,\n                '일': false\n            }\n        },\n        onSubmit: async (values) => {\n            try {\n                await fetch(`${process.env.REACT_APP_SERVER_URL}/api/routine`, {\n                    method: 'POST',\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(values),\n                    credentials: 'include'\n                });\n\n                setTimeout(async () => { //데이터를 저장한 후, 저장한 데이터를 ui에 반영\n                    const res = await fetch(`${process.env.REACT_APP_SERVER_URL}/api/routine`, {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        credentials: 'include'\n                    });\n                    const data = await res.json();\n                    data.sort((a, b) => new Date(\"1970/01/01 \" + a.time) - new Date(\"1970/01/01 \" + b.time));\n\n                    setRoutines(data);\n                }, 1);\n\n            } catch (error) {\n                console.error(error);\n            }\n            setAddForm(false);\n        },\n        validationSchema\n    })\n\n\n    return (\n        <div>\n\n            <div className=\"fixed w-full h-full z-10\">\n                <div className=\"w-full h-full bg-black opacity-80\"\n                    onMouseDown={() => {\n                        setAddForm(false)\n                    }}></div>\n\n                <div className=\"absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 \">\n                    <button className=\"float-right m-1 mr-3 hover:scale-110\"\n                        onMouseDown={() => {\n                            setAddForm(false)\n                        }}>x</button>\n                    <form onSubmit={formik.handleSubmit}>\n                        <div className=\"rounded-lg bg-gray-100 p-6\">\n                            <div className=\"flex mt-2 mb-3\">\n                                <div>\n                                    <input className=\"p-1 mr-1 w-min h-9 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block rounded-md focus:ring-1\"\n                                        ref={inputRef}\n                                        maxLength=\"100\"\n                                        placeholder=\"Title\"\n                                        type=\"text\"\n                                        name=\"title\"\n                                        value={formik.values.title}\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                    />\n                                    {formik.touched.title && formik.errors.title && <p className=\"text-sm text-red-400 ml-1\">{formik.errors.title}</p>}\n                                </div>\n                                <div>\n                                    <input className=\"ml-1 p-1 w-32 h-9 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block rounded-md focus:ring-1\"\n                                        type=\"time\"\n                                        name=\"time\"\n                                        value={formik.values.time}\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                    />\n                                    {formik.touched.time && formik.errors.time && <p className=\"text-sm text-red-400 ml-2\">{formik.errors.time}</p>}\n                                </div>\n                            </div>\n\n                            <textarea className=\"mt-1 p-1 mr-1 h-32 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block w-full rounded-md focus:ring-1\"\n                                maxLength=\"300\"\n                                placeholder=\"Content\"\n                                type=\"text\"\n                                name=\"description\"\n                                value={formik.values.description}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                            />\n\n                            <div>\n                                <div className=\"flex justify-evenly mt-3\">\n                                    {week.map((data, i) =>\n                                        <div key={uuidv4()}\n                                            onMouseDown={() => {\n                                                const copy = { ...weekCheck }\n                                                copy[data[0]] = !copy[data[0]];\n                                                setWeekCheck(copy);\n                                                formik.setFieldValue(\"weekCheck\", copy);\n                                            }}>\n                                            <input\n                                                readOnly\n                                                type=\"checkbox\"\n                                                name=\"weekCheck\"\n                                                id={data[0]}\n                                                checked={weekCheck[data[0]]}\n                                                onBlur={formik.handleBlur}\n                                            />\n                                            <label htmlFor={data[0]}>{data[0]}</label>\n                                        </div>\n                                    )}\n                                </div>\n                                {formik.touched.weekCheck && formik.errors.weekCheck && <p className=\"text-sm text-red-400 ml-4\">{formik.errors.weekCheck}</p>}\n                            </div>\n                            {formik.isSubmitting ?\n                                (<button type=\"submit\" className=\"w-full py-1.5 mt-3 text-white font-medium text-sm rounded shadow-md bg-blue-500\">기록중 입니다...</button>)\n                                :\n                                (<button type=\"submit\" className=\"w-full py-1.5 mt-3 text-white font-medium text-sm rounded shadow-md bg-blue-600 hover:bg-blue-700  focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg\">기록</button>\n                                )}\n\n                            {formik.submitCount > 0 && formik.errors && (\n                                console.error(Object.values(formik.errors).join('\\n')))}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default AddForm;","/Users/imchaemin/Desktop/react-project/project1/client/src/components/EditForm.js",["91","92","93"],[],"import { useRef, useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\"\nimport * as yup from \"yup\"\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction EditForm({ setEditForm, setRoutines, selectedCardId }) {\n\n    const [formData, setFormData] = useState([])\n\n    //선택한 카드의 기존 데이터를 받아옴\n    useEffect(() => {\n        const fetchData = async () => {\n            if (selectedCardId) {\n                try {\n                    const id = selectedCardId\n                    const res = await fetch(`${process.env.REACT_APP_SERVER_URL}/api/routine/${id}`, {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        credentials: 'include'\n                    });\n                    const data = await res.json();\n                    setFormData(data);\n                    setWeekCheck(data.weekCheck);\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n        fetchData();\n    }, []);\n\n    useEffect(() => {//기존 데이터가 없으면 공란으로 설정\n        formik.setValues({\n            title: formData.title || '',\n            time: formData.time || '',\n            description: formData.description || '',\n            weekCheck: weekCheck\n        })\n    }, [formData]);\n\n    //폼이 열리면, 제목란에 자동 포커스 되어 유저가 바로 입력할 수 있도록 구현\n    const inputRef = useRef();\n    useEffect(() => {\n        inputRef.current.focus();\n    }, [])\n\n    //esc키로 폼을 닫을 수 있도록 구현\n    const handleKeyDown = (e) => {\n        if (e.key === 'Escape') {\n            setEditForm(false);\n        }\n    };\n    useEffect(() => { //폼을 닫은 후에도 이벤트가 남아서 램을 낭비하지 않도록 이벤트를 삭제\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    }, []);\n\n\n    const [weekCheck, setWeekCheck] = useState({\n        \"월\": false,\n        \"화\": false,\n        \"수\": false,\n        \"목\": false,\n        \"금\": false,\n        \"토\": false,\n        \"일\": false\n    });\n    const week = Object.entries(weekCheck)\n\n    //유효성 검증\n    const validationSchema = yup.object().shape({\n        title: yup\n            .string()\n            .required('제목을 입력해 주세요.')\n            .max(100, '100자 이내로 작성해 주세요.'),\n        time: yup\n            .string()\n            .required('시간을 선택해 주세요.'),\n        description: yup\n            .string()\n            .max(300, '300자 이내로 작성해 주세요.'),\n        weekCheck: yup\n            .object()\n            .shape({\n                \"월\": yup.boolean(),\n                \"화\": yup.boolean(),\n                \"수\": yup.boolean(),\n                \"목\": yup.boolean(),\n                \"금\": yup.boolean(),\n                \"토\": yup.boolean(),\n                \"일\": yup.boolean(),\n            })\n            .test(\n                'isWeekChecked',\n                '요일을 선택해 주세요.',\n                obj => Object.values(obj).some(checked => checked === true)\n            )\n    })\n\n    //폼의 기본값 설정\n    const formik = useFormik({\n        initialValues: {\n            title: '',\n            time: '',\n            description: '',\n            weekCheck: {\n                '월': false,\n                '화': false,\n                '수': false,\n                '목': false,\n                '금': false,\n                '토': false,\n                '일': false\n            }\n        },\n        onSubmit: async (values) => {\n            const { action, ...requestData } = values;\n            try {\n                if (values.action === 'update') {\n                    await fetch(`${process.env.REACT_APP_SERVER_URL}/api/routine/${selectedCardId}`, {\n                        method: 'PUT',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(requestData),\n                        credentials: 'include'\n                    });\n                } else if (values.action === 'delete') {\n                    await fetch(`${process.env.REACT_APP_SERVER_URL}/api/routine/${selectedCardId}`, {\n                        method: 'delete',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        credentials: 'include'\n                    })\n                }\n                setTimeout(async () => { //데이터를 저장한 후, 저장한 데이터를 ui에 반영\n                    const res = await fetch(`${process.env.REACT_APP_SERVER_URL}/api/routine`, {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        credentials: 'include'\n                    });\n                    const data = await res.json();\n                    data.sort((a, b) => new Date(\"1970/01/01 \" + a.time) - new Date(\"1970/01/01 \" + b.time));\n                    setRoutines(data);\n                }, 1);\n            } catch (error) {\n                console.error(error);\n            }\n            setEditForm(false);\n        },\n        validationSchema\n    })\n\n\n    return (\n        <div>\n            <div className=\"fixed w-full h-full z-10\">\n                <div className=\"w-full h-full bg-black opacity-80\"\n                    onMouseDown={() => {\n                        setEditForm(false)\n                    }}></div>\n\n                <div className=\"absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 \">\n                    <button className=\"float-right m-1 mr-3 hover:scale-110\"\n                        onMouseDown={() => {\n                            setEditForm(false)\n                        }}>x</button>\n                    <form onSubmit={formik.handleSubmit}>\n                        <div className=\"rounded-lg bg-gray-100 p-6\">\n                            <div className=\"flex mt-2 mb-3\">\n                                <div>\n                                    <input className=\"p-1 mr-1 w-min h-9 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block rounded-md focus:ring-1\"\n                                        ref={inputRef}\n                                        maxLength=\"100\"\n                                        placeholder=\"Title\"\n                                        type=\"text\"\n                                        name=\"title\"\n                                        value={formik.values.title}\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                    />\n                                    {formik.touched.title && formik.errors.title && <p className=\"text-sm text-red-400 ml-1\">{formik.errors.title}</p>}\n                                </div>\n                                <div>\n                                    <input className=\"ml-1 p-1 w-32 h-9 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block rounded-md focus:ring-1\"\n                                        type=\"time\"\n                                        name=\"time\"\n                                        value={formik.values.time}\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                    />\n                                    {formik.touched.time && formik.errors.time && <p className=\"text-sm text-red-400 ml-2\">{formik.errors.time}</p>}\n                                </div>\n                            </div>\n\n                            <textarea className=\"mt-1 p-1 mr-1 h-32 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block w-full rounded-md focus:ring-1\"\n                                maxLength=\"300\"\n                                placeholder=\"Content\"\n                                type=\"text\"\n                                name=\"description\"\n                                value={formik.values.description}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                            />\n\n                            <div>\n                                <div className=\"flex justify-evenly mt-3\">\n                                    {week.map((data, i) =>\n                                        <div key={uuidv4()}\n                                            onMouseDown={() => {\n                                                const copy = { ...weekCheck }\n                                                copy[data[0]] = !copy[data[0]];\n                                                setWeekCheck(copy);\n                                                formik.setFieldValue(\"weekCheck\", copy);\n                                            }}>\n                                            <input\n                                                readOnly\n                                                type=\"checkbox\"\n                                                name=\"weekCheck\"\n                                                id={data[0]}\n                                                checked={weekCheck[data[0]]}\n                                                onBlur={formik.handleBlur}\n                                            />\n                                            <label htmlFor={data[0]}>{data[0]}</label>\n                                        </div>\n                                    )}\n                                </div>\n                                {formik.touched.weekCheck && formik.errors.weekCheck && <p className=\"text-sm text-red-400 ml-4\">{formik.errors.weekCheck}</p>}\n                            </div>\n                            <div className=\"flex justify-between\">\n                                {formik.isSubmitting ? (\n                                    <button\n                                        type=\"submit\"\n                                        className=\"w-40 py-1.5 mt-3 text-white font-medium text-sm rounded shadow-md bg-red-500\"\n                                    >\n                                        ...\n                                    </button>\n                                ) : (\n                                    <button\n                                        type=\"submit\"\n                                        className=\"w-40 py-1.5 mt-3 text-white font-medium text-sm rounded shadow-md bg-red-600 hover:bg-red-700  focus:bg-red-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-red-800 active:shadow-lg\"\n                                        onClick={() => {\n                                            formik.setFieldValue('action', 'delete');\n                                        }}\n                                    >\n                                        삭제\n                                    </button>\n                                )}\n\n                                {formik.isSubmitting ? (\n                                    <button\n                                        type=\"submit\"\n                                        className=\"w-40 py-1.5 mt-3 text-white font-medium text-sm rounded shadow-md bg-blue-500\"\n                                    >\n                                        ...\n                                    </button>\n                                ) : (\n                                    <button\n                                        type=\"submit\"\n                                        className=\"w-40 py-1.5 mt-3 text-white font-medium text-sm rounded shadow-md bg-blue-600 hover:bg-blue-700  focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg\"\n                                        onClick={() => {\n                                            formik.setFieldValue('action', 'update');\n                                        }}\n                                    >\n                                        수정\n                                    </button>\n                                )}\n\n                                {formik.submitCount > 0 && formik.errors && (\n                                    console.error(Object.values(formik.errors).join('\\n'))\n                                )}\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default EditForm;","/Users/imchaemin/Desktop/react-project/project1/client/src/components/Header.js",[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/components/AuthOverlay.js",[],[],"/Users/imchaemin/Desktop/react-project/project1/client/src/components/AuthForm.js",["94","95"],[],"import { useRef, useEffect, useState, useContext } from \"react\";\nimport { useFormik } from \"formik\"\nimport * as yup from \"yup\"\nimport SignInContext from '../contexts/SignInCheckContext/SignInCheckContext';\n\n\nfunction AuthForm({ setAuthForm }) {\n\n    const { isSignIn, setIsSignIn } = useContext(SignInContext);\n    const [showPw, setShowPw] = useState(false)\n    const inputRef = useRef();\n\n    //폼이 열리면, ID 입력란에 자동 포커스 되어 유저가 바로 입력할 수 있도록 구현\n    useEffect(() => {\n        inputRef.current.focus();\n    }, [])\n\n    //esc키로 폼을 닫을 수 있도록 구현\n    const handleKeyDown = (e) => {\n        if (e.key === 'Escape') {\n            setAuthForm(false)\n        }\n    };\n    useEffect(() => { //폼을 닫은 후에도 이벤트가 남아서 램을 낭비하지 않도록 이벤트를 삭제\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    }, []);\n\n\n    //유효성 검증\n    const validationSchema = yup.object().shape({\n        inputId: yup\n            .string()\n            .required('아이디를 입력해 주세요.')\n            .min(4, '4자 이상 입력해 주세요.')\n            .max(10, '10자 이하로 입력해 주세요.')\n            .matches(/^[a-z0-9_-]+$/, '영문 소문자, 숫자, 밑줄(_), 대시(-)만 사용할 수 있습니다.')\n            .matches(/[a-z]/, '최소한 한 글자의 영문 소문자가 포함되어야 합니다.'),\n\n        inputPw: yup\n            .string()\n            .required('비밀번호를 입력해 주세요.')\n            .max(20, '20자 이내로 작성해 주세요.')\n    })\n\n    //폼의 기본값 설정\n    const formik = useFormik({\n        initialValues: {\n            inputId: '',\n            inputPw: '',\n        },\n\n        //signIn버튼과 singUp버튼을 클릭 시, 로그인 or 회원가입 기능 구현\n        onSubmit: async (values) => {\n            const { action, ...requestData } = values;\n            try {\n                if (values.action === 'signIn') {\n                    const res = await fetch(`${process.env.REACT_APP_SERVER_URL}/api/user/signin`, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(requestData),\n                        credentials: 'include'\n                    })\n                    if (res.ok) {\n                        setIsSignIn(true);\n                        setAuthForm(false);\n                    } else if (res.status === 404) { //id 오류 시 에러메세지 생성\n                        const data = await res.json();\n                        const errorMessage = data.message;\n                        formik.setFieldError('inputId', errorMessage);\n                    } else if (res.status === 400) {//pw 오류 시 에러메세지 생성\n                        const data = await res.json();\n                        const errorMessage = data.message;\n                        formik.setFieldError('inputPw', errorMessage);\n                    }\n                }\n                if (values.action === 'signUp') {\n                    const res = await fetch(`${process.env.REACT_APP_SERVER_URL}/api/user/signup`, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(requestData),\n                        credentials: 'include'\n                    })\n                    if (res.ok) {\n                        setIsSignIn(true);\n                        setAuthForm(false);\n                    } else if (!res.ok) {\n                        const data = await res.json();\n                        const errorMessage = data.message;\n                        formik.setFieldError('inputId', errorMessage);\n                    }\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        },\n        validationSchema\n    })\n\n\n\n    return (\n        <div>\n            <div className=\"fixed w-full h-full z-30\">\n                <div className=\"w-full h-full bg-black opacity-80\"\n                    onMouseDown={() => {\n                        setAuthForm(false)\n                    }}></div>\n\n                <div className=\"absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 \">\n                    <button className=\"float-right m-1 mr-3 hover:scale-110\"\n                        onMouseDown={() => {\n                            setAuthForm(false)\n                        }}>x</button>\n                    <form onSubmit={formik.handleSubmit}>\n                        <div className=\"rounded-lg bg-gray-100 p-6\">\n                            <div>\n                                <input className=\"mt-2 p-1 w-72 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block rounded-md focus:ring-1\"\n                                    ref={inputRef}\n                                    maxLength=\"10\"\n                                    placeholder=\"아이디\"\n                                    type=\"text\"\n                                    name=\"inputId\"\n                                    value={formik.values.inputId}\n                                    onChange={formik.handleChange}\n                                    onBlur={formik.handleBlur}\n                                />\n                                {formik.touched.inputId && formik.errors.inputId && <p className=\"w-72 text-sm text-red-400 ml-1\">{formik.errors.inputId}</p>}\n                            </div>\n                            <div>\n                                <input className=\"mt-3 p-1 w-full bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block rounded-md focus:ring-1\"\n                                    maxLength=\"20\"\n                                    placeholder=\"비밀번호\"\n                                    type={showPw ? 'text' : 'password'}\n                                    name=\"inputPw\"\n                                    value={formik.values.inputPw}\n                                    onChange={formik.handleChange}\n                                    onBlur={formik.handleBlur}\n                                />\n                                <p className=\"inline-block text-sm ml-1 cursor-pointer hover:scale-105 hover:text-blue-500\"\n                                    onClick={() => { setShowPw(!showPw) }}>  {showPw ? '비밀번호 숨기기' : '비밀번호 보이기'}</p>\n                                {formik.touched.inputPw && formik.errors.inputPw && <p className=\"text-sm text-red-400 ml-1\">{formik.errors.inputPw}</p>}\n                            </div>\n\n\n\n                            {formik.isSubmitting ? (\n                                <button\n                                    type=\"submit\"\n                                    className=\"block w-full py-1.5 mt-8 text-white font-medium text-sm rounded shadow-md bg-blue-500\"\n                                >\n                                    ...\n                                </button>\n                            ) : (\n                                <button\n                                    type=\"submit\"\n                                    className=\"block w-full py-1.5 mt-8 text-white font-medium text-sm rounded shadow-md bg-blue-600 hover:bg-blue-700  focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg\"\n                                    onClick={() => {\n                                        formik.setFieldValue('action', 'signIn');\n                                    }}\n                                >\n                                    로그인\n                                </button>\n                            )}\n\n                            {formik.isSubmitting ? (\n                                <button\n                                    type=\"submit\"\n                                    className=\"block w-full py-1.5 mt-3 text-white font-medium text-sm rounded shadow-md bg-teal-500\"\n                                >\n                                    ...\n                                </button>\n                            ) : (\n                                <button\n                                    type=\"submit\"\n                                    className=\"block w-full py-1.5 mt-3 text-white font-medium text-sm rounded shadow-md bg-teal-600 hover:bg-teal-700  focus:bg-teal-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-teal-800 active:shadow-lg\"\n                                    onClick={() => {\n                                        formik.setFieldValue('action', 'signUp');\n                                    }}\n                                >\n                                    회원가입\n                                </button>\n                            )}\n\n                            {formik.submitCount > 0 && formik.errors && (\n                                console.error(Object.values(formik.errors).join('\\n'))\n                            )}\n\n\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default AuthForm;",{"ruleId":"96","severity":1,"message":"97","line":11,"column":23,"nodeType":"98","messageId":"99","endLine":11,"endColumn":34},{"ruleId":"100","severity":1,"message":"101","line":48,"column":8,"nodeType":"102","endLine":48,"endColumn":10,"suggestions":"103"},{"ruleId":"96","severity":1,"message":"97","line":7,"column":23,"nodeType":"98","messageId":"99","endLine":7,"endColumn":34},{"ruleId":"100","severity":1,"message":"104","line":25,"column":8,"nodeType":"102","endLine":25,"endColumn":10,"suggestions":"105"},{"ruleId":"100","severity":1,"message":"106","line":31,"column":8,"nodeType":"102","endLine":31,"endColumn":10,"suggestions":"107"},{"ruleId":"100","severity":1,"message":"108","line":40,"column":8,"nodeType":"102","endLine":40,"endColumn":18,"suggestions":"109"},{"ruleId":"100","severity":1,"message":"104","line":59,"column":8,"nodeType":"102","endLine":59,"endColumn":10,"suggestions":"110"},{"ruleId":"96","severity":1,"message":"111","line":9,"column":13,"nodeType":"98","messageId":"99","endLine":9,"endColumn":21},{"ruleId":"100","severity":1,"message":"104","line":29,"column":8,"nodeType":"102","endLine":29,"endColumn":10,"suggestions":"112"},"no-unused-vars","'setIsSignIn' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'today' and 'weekCheck'. Either include them or remove the dependency array.","ArrayExpression",["113"],"React Hook useEffect has a missing dependency: 'handleKeyDown'. Either include it or remove the dependency array.",["114"],"React Hook useEffect has a missing dependency: 'selectedCardId'. Either include it or remove the dependency array.",["115"],"React Hook useEffect has missing dependencies: 'formik' and 'weekCheck'. Either include them or remove the dependency array.",["116"],["117"],"'isSignIn' is assigned a value but never used.",["118"],{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"121","fix":"127"},{"desc":"121","fix":"128"},"Update the dependencies array to be: [today, weekCheck]",{"range":"129","text":"130"},"Update the dependencies array to be: [handleKeyDown]",{"range":"131","text":"132"},"Update the dependencies array to be: [selectedCardId]",{"range":"133","text":"134"},"Update the dependencies array to be: [formData, formik, weekCheck]",{"range":"135","text":"136"},{"range":"137","text":"132"},{"range":"138","text":"132"},[1545,1547],"[today, weekCheck]",[727,729],"[handleKeyDown]",[1045,1047],"[selectedCardId]",[1305,1315],"[formData, formik, weekCheck]",[1845,1847],[888,890]]